/*!
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 *
 */
(function (events, settings, connections) {
  const { toolkit: kit } = window.griffon;
  const { sharedState } = kit['aep-mobile'];

  const eventMap = {};
  const clientMap = {};

  const REQUIRED_TRACKING_MIXINS = [
    'https://ns.adobe.com/xdm/context/experienceevent-environment-details',
    'https://ns.adobe.com/xdm/context/experienceevent-pushtracking',
    'https://ns.adobe.com/xdm/context/experienceevent-application',
    'https://ns.adobe.com/experience/customerJourneyManagement/messageprofile',
    'https://ns.adobe.com/experience/customerJourneyManagement/messageexecution'
  ];

  const baseLaunchUrl = client =>
    `https://experience.adobe.com/launch/companies/${client.companyId}/properties/${client.propertyId}`;

  // for messaging to be configured correctly, we need:
  // an ecid
  // a push token
  // a valid tracking dataset

  events.forEach((event) => {
    if (sharedState.isMatch(event)) {
      const clientId = sharedState.get('clientId', event);
      const xdm = sharedState.getXdm(event)

      const ecid = xdm?.identityMap?.ECID?.[0]?.id;
      const propertyId = sharedState.getStateData(event)?.['property.id'];
      const eventDataset = sharedState.getStateData(event)?.['messaging.eventDataset'];
      const token = sharedState.getStateData(event)?.['pushidentifier'];

      clientMap[clientId] = clientMap[clientId] || {};
      eventMap[clientId] = eventMap[clientId] || {};

      if (ecid && !clientMap[clientId].ecid) {
        clientMap[clientId].ecid = ecid;
        eventMap[clientId].ecid = event;
      }
      if (propertyId && !clientMap[clientId].propertyId) {
        clientMap[clientId].propertyId = propertyId;
        eventMap[clientId].propertyId = event;
      }
      if (eventDataset && !clientMap[clientId].eventDataset) {
        clientMap[clientId].eventDataset = eventDataset;
        eventMap[clientId].eventDataset = event;
      }
      if (token && !clientMap[clientId].token) {
        clientMap[clientId].token = token;
        eventMap[clientId].token = event;
      }
    }
  });

  const clientIds = Object.keys(clientMap);

  // we're going to loop through once to grab the company ids
  // this isnt required, so we wont error on these
  connections.forEach((connection) => {
    if (connection.namespace === 'dev2') {
      for (let i = 0; i < clientIds.length; ++i) {
        const id = clientIds[i];
        const client = clientMap[id];

        if (client && connection.context.propertyId === client.propertyId) {
          if (connection.loaded) {
            clientMap[id].companyId = connection.data.companyId;
          }
        }
      }
    }
  });

  let hasSuccess;
  let results;

  // let's validate that all the clients have the valid configurations
  for (let i = 0; i < clientIds.length; ++i) {
    const id = clientIds[i];
    const client = clientMap[id];

    if (!client.ecid) {
      results = {
        result: 'not matched',
        message: 'No ECID Detected',
        details: 'The ECID is automatically generated by the SDK. Missing this event generally means that either the AEP SDK or the Assurance SDK hasn\'t been initialized correctly.'
      };
    } else if (!client.token) {
      results = {
        result: 'not matched',
        message: 'Push Token Not Captured',
        details: 'The App wasn\'t setup correctly for messaging. Make sure you\'ve followed the steps to enable push messaging in your application and that you are calling the setPushIdentifier API.',
        links: [
          {
            label: 'Documentation: Setup Push',
            link: 'https://aep-sdks.gitbook.io/docs/using-mobile-extensions/adobe-journey-optimizer#implement-extension-in-mobile-app'
          }
        ]
      };
    } else if (!client.eventDataset) {
      let links;
      if (client.companyId) {
        links = [
          {
            label: 'Extension Catalog',
            link: `${baseLaunchUrl(client)}/extensions/catalog`
          },
          {
            label: 'Publishing',
            link: `${baseLaunchUrl(client)}/publishing`
          }
        ];
      }

      results = {
        result: 'not matched',
        message: 'Message Tracking Not Configured',
        details: 'Make sure you\'ve installed the Adobe Journey Optimizer extension and that you\'ve published your changes.',
        links
      };
    }
  }

  if (results) { return results; }

  // now we will validate the tracking schema exists and has the correct required mixins
  // to do this we need to load the tracking dataset then the tracking schema
  connections.forEach((connection) => {
    if (connection.namespace === 'dev5') {
      for (let i = 0; i < clientIds.length; ++i) {
        const id = clientIds[i];
        const client = clientMap[id];
        const event = eventMap[id];

        if (connection.context.datasetId === client.eventDataset) {
          if (connection.loading) {
            results = {
              result: 'loading',
              message: 'Loading Tracking Dataset'
            };
          } else if (connection.error) {
            const details = connection.error.state === 403
              ? 'It appears your user doesn\'t have access to load Datasets. Please validate your provisioning and try again'
              : 'An unknown error has occurred while attempting to load the Tracking Dataset. It\'s possible this Dataset does not exist.';
            results = {
              result: 'not matched',
              message: 'Error Loading Tracking Dataset',
              details,
              events: [event.eventDataset]
            };
          } else if (connection.loaded) {
            clientMap[id].trackingSchema = connection.data.schema;
          }
        }
      }
    }
  });

  // now we'll check against the schemas
  connections.forEach((connection) => {
    if (connection.namespace === 'dev4') {
      for (let i = 0; i < clientIds.length; ++i) {
        const id = clientIds[i];
        const client = clientMap[id];
        const event = eventMap[id];

        if (connection.context.schemaUrl === client.trackingSchema) {
          if (connection.loading) {
            results = {
              result: 'loading',
              message: 'Loading Tracking Schema'
            };
          } else if (connection.error) {
            const details = connection.error.state === 403
              ? 'It appears your user doesn\'t have access to load Schemas. Please validate your provisioning and try again'
              : 'An unknown error has occurred while attempting to load the Tracking Schema. It\'s possible this Dataset does not exist.';
            results = {
              result: 'not matched',
              message: 'Error Loading Tracking Schema',
              details,
              events: [event.eventDataset]
            };
          } else if (connection.loaded) {
            for (let i = 0; i < REQUIRED_TRACKING_MIXINS.length; ++i) {
              if (connection.data.extends.indexOf(REQUIRED_TRACKING_MIXINS[i]) === -1) {
                results = {
                  result: 'not matched',
                  message: 'Invalid Tracking Dataset',
                  details: `The dataset used for message tracking requires the following datasets:
                    <ul>
                      <li>Push Notification Tracking</li>
                      <li>Environment details</li>
                      <li>Application details</li>
                      <li>Adobe CJM ExperienceEvent - Message Profile Details</li>
                      <li>Adobe CJM ExperienceEvent - Message Execution Details</li>
                    </ul>
                    Please verify your dataset`,
                  events: [event.eventDataset]
                };
              }
            }
            if (!results) {
              hasSuccess = true;
            }
          }
        }
      }
    }
  });

  if (results) { return results; }
  if (hasSuccess) { return { result: 'matched', message: 'Client configured correctly for push messaging' }; }

  return { result: 'unknown', message: 'Unknown' }; // leftovers
});
